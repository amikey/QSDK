unit QSDK.Wechat.ios;
{ Delphi 微信开发接口翻译 by swish

  您可以自由使用和分发本部分代码，唯一的要求就是一旦你发现翻译存在问题，请与我联系，
  以便及时改正相关的错误
}

interface

uses system.classes, iOSapi.Foundation, Macapi.ObjectiveC, iOSapi.UIKit;

{ !@brief 应用支持接收微信的文件类型 * }
const
  MMAPP_SUPPORT_NOCONTENT = $0;
{$EXTERNALSYM MMAPP_SUPPORT_NOCONTENT}
  MMAPP_SUPPORT_TEXT = $1;
{$EXTERNALSYM MMAPP_SUPPORT_TEXT}
  MMAPP_SUPPORT_PICTURE = $2;
{$EXTERNALSYM MMAPP_SUPPORT_PICTURE}
  MMAPP_SUPPORT_LOCATION = $4;
{$EXTERNALSYM MMAPP_SUPPORT_LOCATION}
  MMAPP_SUPPORT_VIDEO = $8;
{$EXTERNALSYM MMAPP_SUPPORT_VIDEO}
  MMAPP_SUPPORT_AUDIO = $10;
{$EXTERNALSYM MMAPP_SUPPORT_AUDIO}
  MMAPP_SUPPORT_WEBPAGE = $20;
{$EXTERNALSYM MMAPP_SUPPORT_WEBPAGE}
  // Suport File Type
  MMAPP_SUPPORT_DOC = $40; // doc
{$EXTERNALSYM MMAPP_SUPPORT_DOC}
  MMAPP_SUPPORT_DOCX = $80; // docx
{$EXTERNALSYM MMAPP_SUPPORT_DOCX}
  MMAPP_SUPPORT_PPT = $100; // ppt
{$EXTERNALSYM MMAPP_SUPPORT_PPT}
  MMAPP_SUPPORT_PPTX = $200; // pptx
{$EXTERNALSYM MMAPP_SUPPORT_PPTX}
  MMAPP_SUPPORT_XLS = $400; // xls
{$EXTERNALSYM MMAPP_SUPPORT_XLS}
  MMAPP_SUPPORT_XLSX = $800; // xlsx
{$EXTERNALSYM MMAPP_SUPPORT_XLSX}
  MMAPP_SUPPORT_PDF = $1000; // pdf
{$EXTERNALSYM MMAPP_SUPPORT_PDF}

type
  { ! @brief 错误码 }
  WXErrCode = (WXSuccess = 0, { < 成功 }
    WXErrCodeCommon = -1, { < 普通错误类型 }
    WXErrCodeUserCancel = -2, { < 用户点击取消并返回 }
    WXErrCodeSentFail = -3, { < 发送失败 }
    WXErrCodeAuthDeny = -4, { < 授权失败 }
    WXErrCodeUnsupport = -5 { < 微信不支持 }
    );
  { ! @brief 请求发送场景 }
  WXScen = (WXSceneSession = 0, { < 聊天界面 }
    WXSceneTimeline = 1, { < 朋友圈 }
    WXSceneFavorite = 2 { < 收藏 }
    );

  WXAPISupport = (WXAPISupportSession = 0);

  { !@brief 跳转profile类型 }
  WXBizProfileType = (WXBizProfileType_Normal = 0, // **< 普通公众号  }
    WXBizProfileType_Device = 1 // **< 硬件公众号  }
    );

  { !@brief 跳转mp网页类型 * }
  WXMPWebviewType = (WXMPWebviewType_Ad = 0 { * < 广告网页 * } );

  { ! @brief 该类为微信终端SDK所有请求类的基类 }
  BaseReqClass = interface(NSObjectClass)
    ['{06A21E95-7159-4F90-B535-9ED96E1DF375}']
  end;

  BaseReq = interface(NSObject)
    ['{C36129E7-ABB1-47AA-A3B9-D70865DBAE24}']
    { 请求类型 }
    function &type: Integer; cdecl;
    procedure setType(value: Integer); cdecl;
    { 由用户微信号和AppID组成的唯一标识，发送请求时第三方程序必须填写，用于校验微信用户是否换号登录 }
    function openID: NSString; cdecl;
    procedure setOpenID(value: NSString); cdecl;
  end;

  TBaseReq = class(TOCGenericImport<BaseReqClass, BaseReq>)
  end;

  { ! @brief 该类为微信终端SDK所有响应类的基类
    *
  }
  BaseRespClass = interface(NSObjectClass)
    ['{D0C19403-0A4E-41D5-B053-D4739F52202E}']
  end;

  BaseResp = interface(NSObject)
    ['{EC480738-8F73-492E-BACE-A0AFE997E5EA}']
    { 错误码 }
    function errCode: Integer; cdecl;
    procedure setErrCode(value: Integer); cdecl;
    { 错误提示字符串 }
    function errStr: NSString; cdecl;
    procedure setErrStr(value: NSString); cdecl;
    { 响应类型 }
    function &type: Integer; cdecl;
    procedure setType(value: Integer); cdecl;
  end;

  TBaseResp = class(TOCGenericImport<BaseRespClass, BaseResp>)
  end;

  { ! @brief 第三方向微信终端发起支付的消息结构体
    *
    *  第三方向微信终端发起支付的消息结构体，微信终端处理后会向第三方返回处理结果
    * @see PayResp
  }

  PayReqClass = interface(BaseReqClass)
    ['{388EAA60-336D-4641-A3A6-07031B792BF2}']
  end;

  PayReq = interface(BaseReq)
    ['{DB5A7722-C6B3-41A5-86D9-A7DC5E90A497}']
    { 商家向财付通申请的商家id }
    // @property (nonatomic, retain)NSString * partnerId;
    function partnerId: NSString; cdecl;
    procedure setPartnerId(value: NSString); cdecl;
    { 预支付订单 }
    // @property (nonatomic, retain)NSString * prepayId;
    function prepayId: NSString; cdecl;
    procedure setPrepayId(value: NSString); cdecl;
    { 随机串，防重发 }
    // @property (nonatomic, retain)NSString * nonceStr;
    function nonceStr: NSString; cdecl;
    procedure setNonceStr(value: NSString); cdecl;
    { 时间戳，防重发 }
    // @property (nonatomic, assign)UInt32 timeStamp;
    function timeStamp: UInt32; cdecl;
    procedure setTimeStamp(value: UInt32); cdecl;
    { 商家根据财付通文档填写的数据和签名 }
    // @property (nonatomic, retain)NSString * package;
    function package: NSString; cdecl;
    procedure setPackage(value: NSString); cdecl;
    { 商家根据微信开放平台文档对数据做的签名 }
    // @property (nonatomic, retain)NSString * sign;
    function sign: NSString; cdecl;
    procedure setSign(value: NSString); cdecl;
  end;

  TPayReq = class(TOCGenericImport<PayReqClass, PayReq>)
  end;

  { ! @brief 微信终端返回给第三方的关于支付结果的结构体
    *
    *  微信终端返回给第三方的关于支付结果的结构体
  }
  PayRespClass = interface(BaseRespClass)
    ['{4E6C5544-4D0F-4D00-96FD-1CD3F816F9A1}']
  end;

  PayResp = interface(BaseResp)
    ['{618CA8BC-4CA8-4EE0-A2C4-677B2C88AE16}']
    { 财付通返回给商家的信息 }
    // @property (nonatomic, retain)NSString * returnKey;
    function returnKey: NSString; cdecl;
    procedure setReturnKey(value: NSString); cdecl;
  end;

  { ! @brief 第三方向微信终端发起拆企业红包的消息结构体
    *
    *  第三方向微信终端发起拆企业红包的消息结构体，微信终端处理后会向第三方返回处理结果
    * @see HBReq
  }
  HBReqClass = interface(BaseReqClass)
    ['{F11D001B-642B-4FB5-88AF-7CC77DC670D5}']
  end;

  HBReq = interface(BaseReq)
    ['{65AC28B0-117C-47E8-BB57-F1077735747C}']
    { 随机串，防重发 }
    // @property (nonatomic, retain)NSString * nonceStr;
    function nonceStr: NSString; cdecl;
    procedure setNonceStr(value: NSString); cdecl;
    { 时间戳，防重发 }
    // @property (nonatomic, assign)UInt32 timeStamp;
    function timeStamp: UInt32; cdecl;
    procedure setTimeStamp(value: UInt32); cdecl;
    { 商家根据微信企业红包开发文档填写的数据和签名 }
    // @property (nonatomic, retain)NSString * package;
    function package: NSString; cdecl;
    procedure setPackage(value: NSString); cdecl;
    { 商家根据微信企业红包开发文档对数据做的签名 }
    // @property (nonatomic, retain)NSString * sign;
    function sign: NSString; cdecl;
    procedure setSign(value: NSString); cdecl;
  end;

  { ! @brief 微信终端返回给第三方的关于拆企业红包结果的结构体
    *
    *  微信终端返回给第三方的关于拆企业红包结果的结构体
  }
  THBReq = class(TOCGenericImport<HBReqClass, HBReq>)
  end;

  HBRespClass = interface(BaseRespClass)
    ['{820B4C8B-3586-4C9B-B8DB-02C8A6D74E9B}']
  end;

  HBResp = interface(BaseResp)
    ['{38098363-E13C-499C-9ACC-7B9C670917C3}']
  end;

  THBResp = class(TOCGenericImport<HBRespClass, HBResp>)
  end;

  { ! @brief 第三方程序向微信终端请求认证的消息结构
    *
    * 第三方程序要向微信申请认证，并请求某些权限，需要调用WXApi的sendReq成员函数，
    * 向微信终端发送一个SendAuthReq消息结构。微信终端处理完后会向第三方程序发送一个处理结果。
    * @see SendAuthResp
  }
  SendAuthReqClass = interface(BaseReqClass)
    ['{ABE15584-A824-45E1-8B34-4411E73CD4B8}']
  end;

  SendAuthReq = interface(BaseReq)
    ['{9F377B5D-77A9-4F44-82D4-2DD06596B77C}']
    { 第三方程序要向微信申请认证，并请求某些权限，需要调用WXApi的sendReq成员函数，向微信终端发送一个SendAuthReq消息结构。微信终端处理完后会向第三方程序发送一个处理结果。
      * @see SendAuthResp
      * @note scope字符串长度不能超过1K
    }
    // @property (nonatomic, retain)NSString * scope;
    function scope: NSString; cdecl;
    procedure setScope(value: NSString); cdecl;
    { 第三方程序本身用来标识其请求的唯一性，最后跳转回第三方程序时，由微信终端回传。
      * @note state字符串长度不能超过1K
    }
    // @property (nonatomic, retain)NSString * state;
    function state: NSString; cdecl;
    procedure SetState(value: NSString); cdecl;
  end;

  TSendAuthReq = class(TOCGenericImport<SendAuthReqClass, SendAuthReq>)
  end;

  { ! @brief 微信处理完第三方程序的认证和权限申请后向第三方程序回送的处理结果。
    *
    * 第三方程序要向微信申请认证，并请求某些权限，需要调用WXApi的sendReq成员函数，向微信终端发送一个SendAuthReq消息结构。
    * 微信终端处理完后会向第三方程序发送一个SendAuthResp。
    * @see onResp
  }
  SendAuthRespClass = interface(BaseRespClass)
    ['{24AF9582-7A5C-4400-B0AD-45B777F3992E}']
  end;

  SendAuthResp = interface(BaseResp)
    ['{A876B906-AB6D-49A4-B30F-79F497B548B8}']
    // @property (nonatomic, retain)NSString * code;
    function code: NSString; cdecl;
    procedure setCode(value: NSString); cdecl;
    { 第三方程序发送时用来标识其请求的唯一性的标志，由第三方程序调用sendReq时传入，由微信终端回传
      * @note state字符串长度不能超过1K
    }
    // @property (nonatomic, retain)NSString * state;
    function state: NSString; cdecl;
    procedure SetState(value: NSString); cdecl;
    // @property (nonatomic, retain)NSString * lang;
    function lang: NSString; cdecl;
    procedure setLang(value: NSString); cdecl;
    // @property (nonatomic, retain)NSString * country;
    function country: NSString; cdecl;
    procedure setCountry(value: NSString); cdecl;
  end;

  TSendAuthResp = class(TOCGenericImport<SendAuthRespClass, SendAuthResp>)
  end;

  { ! @brief 第三方程序发送消息至微信终端程序的消息结构体
    *
    * 第三方程序向微信发送信息需要传入SendMessageToWXReq结构体，信息类型包括文本消息和多媒体消息，
    * 分别对应于text和message成员。调用该方法后，微信处理完信息会向第三方程序发送一个处理结果。
    * @see SendMessageToWXResp
  }
  SendMessageToWXReqClass = interface(BaseReqClass)
    ['{254409BF-439D-4007-BDDC-4FBECE4E0695}']
  end;

  WXMediaMessage = interface;

  SendMessageToWXReq = interface(BaseReq)
    ['{259CFF4B-1F03-473D-A792-4194742F5DE5}']
    { 发送消息的文本内容
      * @note 文本长度必须大于0且小于10K
    }
    // @property (nonatomic, retain)NSString * text;
    function text: NSString; cdecl;
    procedure setText(value: NSString); cdecl;
    { 发送消息的多媒体内容
      * @see WXMediaMessage
    }
    // @property (nonatomic, retain)WXMediaMessage * message;
    function &message: WXMediaMessage; cdecl;
    procedure setMessage(value: WXMediaMessage); cdecl;
    { 发送消息的类型，包括文本消息和多媒体消息两种，两者只能选择其一，不能同时发送文本和多媒体消息 }
    // @property (nonatomic, assign)BOOL bText;
    function bText: Boolean; cdecl;
    procedure setBText(value: Boolean); cdecl;
    { 发送的目标场景，可以选择发送到会话(WXSceneSession)或者朋友圈(WXSceneTimeline)。 默认发送到会话。
      * @see WXScene
    }
    // @property (nonatomic, assign)int scene;
    function scene: Integer; cdecl;
    procedure setScene(value: Integer); cdecl;
  end;

  TSendMessageToWXReq = class(TOCGenericImport<SendMessageToWXReqClass,
    SendMessageToWXReq>)
  end;

  // SendMessageToWXResp
  { ! @brief 微信终端向第三方程序返回的SendMessageToWXReq处理结果。
    *
    * 第三方程序向微信终端发送SendMessageToWXReq后，微信发送回来的处理结果，该结果用SendMessageToWXResp表示。
  }
  SendMessageToWXRespClass = interface(BaseRespClass)
    ['{1E5AF40D-CC22-4266-B00C-CC6D26AF3FB4}']
  end;

  SendMessageToWXResp = interface(BaseResp)
    ['{51A97A2C-BAE5-4FB7-BA7A-7F5CCB5E9DDE}']
    // @property (nonatomic, retain)NSString * lang;
    function lang: NSString; cdecl;
    procedure setLang(value: NSString); cdecl;
    // @property (nonatomic, retain)NSString * country;
    function country: NSString;
    procedure setCountry(value: NSString); cdecl;
  end;

  TSendMessageToWXResp = class(TOCGenericImport<SendMessageToWXRespClass,
    SendMessageToWXResp>)
  end;

  // GetMessageFromWXReq
  { ! @brief 微信终端向第三方程序请求提供内容的消息结构体。
    *
    * 微信终端向第三方程序请求提供内容，微信终端会向第三方程序发送GetMessageFromWXReq消息结构体，
    * 需要第三方程序调用sendResp返回一个GetMessageFromWXResp消息结构体。
  }
  GetMessageFromWXReqClass = interface(BaseReqClass)
    ['{5336C95C-F4F5-42F9-BFFF-7A804E7E2BF4}']
  end;

  GetMessageFromWXReq = interface(BaseReq)
    ['{A2EB6AD2-B7B7-4D24-AE9A-8C966EFC6DAB}']
    // @property (nonatomic, retain)NSString * lang;
    function lang: NSString; cdecl;
    procedure setLang(lang: NSString); cdecl;
    // @property (nonatomic, retain)NSString * country;
    function country: NSString; cdecl;
    procedure setCountry(country: NSString); cdecl;
  end;

  TGetMessageFromWXReq = class(TOCGenericImport<GetMessageFromWXReqClass,
    GetMessageFromWXReq>)
  end;

  // GetMessageFromWXResp
  { ! @brief 微信终端向第三方程序请求提供内容，第三方程序向微信终端返回的消息结构体。
    *
    * 微信终端向第三方程序请求提供内容，第三方程序调用sendResp向微信终端返回一个GetMessageFromWXResp消息结构体。
  }
  GetMessageFromWXRespClass = interface(BaseRespClass)
    ['{C0DCB727-A666-4CAD-88AF-E133D2E4F9A1}']
  end;

  GetMessageFromWXResp = interface(BaseResp)
    ['{98F8EB73-5612-4AD3-84F3-40689C37119E}']
    { 向微信终端提供的文本内容
      @note 文本长度必须大于0且小于10K
    }
    // @property (nonatomic, retain)NSString * text;
    function text: NSString; cdecl;
    procedure setText(text: NSString); cdecl;
    { 向微信终端提供的多媒体内容。
      * @see WXMediaMessage
    }
    // @property (nonatomic, retain)WXMediaMessage * message;
    function &message: WXMediaMessage; cdecl;
    procedure setMessage(value: WXMediaMessage); cdecl;
    { 向微信终端提供内容的消息类型，包括文本消息和多媒体消息两种，两者只能选择其一，不能同时发送文本和多媒体消息 }
    // @property (nonatomic, assign)BOOL bText;
    function bText: Boolean; cdecl;
    procedure setBText(value: Boolean); cdecl;
  end;

  TGetMessageFromWXResp = class(TOCGenericImport<GetMessageFromWXRespClass,
    GetMessageFromWXResp>)
  end;

  { ! @brief 微信通知第三方程序，要求第三方程序显示的消息结构体。
    *
    * 微信需要通知第三方程序显示或处理某些内容时，会向第三方程序发送ShowMessageFromWXReq消息结构体。
    * 第三方程序处理完内容后调用sendResp向微信终端发送ShowMessageFromWXResp。
  }
  ShowMessageFromWXReqClass = interface(BaseReqClass)
    ['{BED6A683-9209-4427-8527-042FB496DB6F}']
  end;

  ShowMessageFromWXReq = interface(BaseReq)
    ['{9F6552D5-8D18-4A6F-9ADC-9FE87EC4668B}']
    { 微信终端向第三方程序发送的要求第三方程序处理的多媒体内容
      * @see WXMediaMessage
    }
    // @property (nonatomic, retain)WXMediaMessage * message;
    function &message: WXMediaMessage; cdecl;
    procedure setMessage(value: WXMediaMessage); cdecl;
    // @property (nonatomic, retain)NSString * lang;
    function lang: NSString; cdecl;
    procedure setLang(lang: NSString); cdecl;
    // @property (nonatomic, retain)NSString * country;
    function country: NSString; cdecl;
    procedure setCountry(country: NSString); cdecl;
  end;

  TShowMessageFromWXReq = class(TOCGenericImport<ShowMessageFromWXReqClass,
    ShowMessageFromWXReq>)
  end;

  { ! @brief 微信通知第三方程序，要求第三方程序显示或处理某些消息，第三方程序处理完后向微信终端发送的处理结果。
    *
    * 微信需要通知第三方程序显示或处理某些内容时，会向第三方程序发送ShowMessageFromWXReq消息结构体。
    * 第三方程序处理完内容后调用sendResp向微信终端发送ShowMessageFromWXResp。
  }
  ShowMessageFromWXRespClass = interface(BaseRespClass)
    ['{90C05FE5-29FC-4E7C-A583-94D5766A80C4}']
  end;

  ShowMessageFromWXResp = interface(BaseResp)
    ['{4827669C-5250-4016-ACBE-E280A91C455C}']
  end;

  TShowMessageFromWXResp = class(TOCGenericImport<ShowMessageFromWXRespClass,
    ShowMessageFromWXResp>)
  end;

  { ! @brief 微信终端打开第三方程序携带的消息结构体
    *
    *  微信向第三方发送的结构体，第三方不需要返回
  }
  LaunchFromWXReqClass = interface(BaseReqClass)
    ['{9B2C18BB-2F01-47CF-A09B-5986B252B8C0}']
  end;

  LaunchFromWXReq = interface(BaseReq)
    ['{3936751B-AB7C-4935-B497-040790F364E1}']
    // @property (nonatomic, retain)WXMediaMessage * message;
    function &message: WXMediaMessage; cdecl;
    procedure setMessage(value: WXMediaMessage); cdecl;
    // @property (nonatomic, retain)NSString * lang;
    function lang: NSString; cdecl;
    procedure setLang(lang: NSString); cdecl;
    // @property (nonatomic, retain)NSString * country;
    function country: NSString; cdecl;
    procedure setCountry(country: NSString); cdecl;
  end;

  TLaunchFromWXReq = class(TOCGenericImport<LaunchFromWXReqClass,
    LaunchFromWXReq>)
  end;

  { ! @brief 第三方通知微信，打开临时会话
    *
    * 第三方通知微信，打开临时会话
  }
  OpenTempSessionReqClass = interface(BaseReqClass)
    ['{B80C1037-331B-460C-A25B-9D6FE96F1A72}']
  end;

  OpenTempSessionReq = interface(BaseReq)
    ['{D79FA6CF-E71A-469A-85C6-2C2991EA9126}']

    { 需要打开的用户名
      * @attention 长度不能超过512字节
    }
    // @property (nonatomic, retain)NSString * username;
    function username: NSString; cdecl;
    procedure setUsername(value: NSString); cdecl;
    { 开发者自定义参数，拉起临时会话后会发给开发者后台，可以用于识别场景
      * @attention 长度不能超过32位
    }
    // @property (nonatomic, retain)NSString * sessionFrom;
    function sessionFrom: NSString; cdecl;
    procedure setSessionFrom(value: NSString); cdecl;
  end;

  TOpenTempSessionReq = class(TOCGenericImport<OpenTempSessionReqClass,
    OpenTempSessionReq>)
  end;

  { ! @brief 第三方通知微信启动内部浏览器，打开指定网页
    *
    *  第三方通知微信启动内部浏览器，打开指定Url对应的网页
  }
  OpenWebviewReqClass = interface(BaseReqClass)
    ['{A8F5F617-A29D-4613-B332-33CF3CBC7940}']
  end;

  OpenWebviewReq = interface(BaseReq)
    ['{147D4345-4253-45CB-A448-213F49F34931}']
    { 需要打开的网页对应的Url
      * @attention 长度不能超过1024
    }
    // @property (nonatomic, retain)NSString * url;
    function url: NSString; cdecl;
    procedure setUrl(value: NSString); cdecl;
  end;

  TOpenWebviewReq = class(TOCGenericImport<OpenWebviewReqClass, OpenWebviewReq>)
  end;

  { ! @brief 微信终端向第三方程序返回的OpenWebviewReq处理结果
    *
    * 第三方程序向微信终端发送OpenWebviewReq后，微信发送回来的处理结果，该结果用OpenWebviewResp表示
  }
  OpenWebviewRespClass = interface(BaseRespClass)
    ['{4E86B1A7-900B-41B1-9FBF-C26DD765FB95}']
  end;

  OpenWebviewResp = interface(BaseResp)
    ['{EBAEFF0C-4AE0-4482-AECF-92B778595226}']
  end;

  TOpenWebviewResp = class(TOCGenericImport<OpenWebviewRespClass,
    OpenWebviewResp>)
  end;

  { ! @brief 微信终端向第三方程序返回的OpenTempSessionReq处理结果。
    *
    * 第三方程序向微信终端发送OpenTempSessionReq后，微信发送回来的处理结果，该结果用OpenTempSessionResp表示。
  }
  OpenTempSessionRespClass = interface(BaseRespClass)
    ['{B38F7B81-3D16-4939-AB13-D84D3BE52139}']
  end;

  OpenTempSessionResp = interface(BaseResp)
    ['{17D5AE8F-79E8-46E5-A5B6-028091574AFA}']
  end;

  TOpenTempSessionResp = class(TOCGenericImport<OpenTempSessionRespClass,
    OpenTempSessionResp>)
  end;

  { ! @brief 第三方通知微信，打开硬件排行榜
    *
    * 第三方通知微信，打开硬件排行榜
  }

  OpenRankListReqClass = interface(BaseReqClass)
    ['{B2D978E8-4C47-4BB9-8204-14C937D31B74}']
  end;

  OpenRankListReq = interface(BaseReq)
    ['{220337FB-47FE-42EE-A107-E879A7115F09}']
  end;

  TOpenRankListReq = class(TOCGenericImport<OpenRankListReqClass,
    OpenRankListReq>)
  end;

  { ! @brief 微信终端向第三方程序返回的OpenRankListReq处理结果。
    *
    * 第三方程序向微信终端发送OpenRankListReq后，微信发送回来的处理结果，该结果用OpenRankListResp表示。
  }

  OpenRanklistRespClass = interface(BaseRespClass)
    ['{A4F7F8C6-1295-445B-995E-67FF9C0E6794}']
  end;

  OpenRanklistResp = interface(BaseResp)
    ['{F93E5F3A-FD8D-4FDA-99E4-9457856B003D}']
  end;

  TOpenRanklistResp = class(TOCGenericImport<OpenRanklistRespClass,
    OpenRanklistResp>)
  end;

  { ! @brief 第三方通知微信，打开指定微信号profile页面
    *
    * 第三方通知微信，打开指定微信号profile页面
  }
  JumpToBizProfileReqClass = interface(BaseReqClass)
    ['{45563276-B4AE-4EAC-AA42-05E17362C2F8}']
  end;

  JumpToBizProfileReq = interface(BaseReq)
    ['{90A96148-5B36-47B2-82DF-89BDC5874135}']
    { 跳转到该公众号的profile
      * @attention 长度不能超过512字节
    }
    // @property (nonatomic, retain)NSString * username;
    function username: NSString; cdecl;
    procedure setUsername(value: NSString); cdecl;
    { 如果用户加了该公众号为好友，extMsg会上传到服务器
      * @attention 长度不能超过1024字节
    }
    // @property (nonatomic, retain)NSString * extMsg;
    function extMsg: NSString; cdecl;
    procedure setExtMsg(value: NSString); cdecl;
    {
      * 跳转的公众号类型
      * @see WXBizProfileType
    }
    // @property (nonatomic, assign)int profileType;
    function profileType: Integer; cdecl;
    procedure setProfileType(value: Integer); cdecl;
  end;

  TJumpToBizProfileReq = class(TOCGenericImport<JumpToBizProfileReqClass,
    JumpToBizProfileReq>)
  end;

  { ! @brief 第三方通知微信，打开指定usrname的profile网页版
    *
  }
  JumpToBizWebviewReqClass = interface(BaseReqClass)
    ['{1069720E-87B1-48FC-B5C5-1E90084AC704}']
  end;

  JumpToBizWebviewReq = interface(BaseReq)
    ['{BBC4995C-6DEF-4129-92AB-A18A86CC60B7}']
    { 跳转的网页类型，目前只支持广告页
      * @see WXMPWebviewType
    }
    // @property (nonatomic, assign)int webType;
    function webType: Integer; cdecl;
    procedure setWebType(value: Integer); cdecl;
    { 跳转到该公众号的profile网页版
      * @attention 长度不能超过512字节
    }
    // @property (nonatomic, retain)NSString * tousrname;
    function tousrname: NSString; cdecl;
    procedure setTousrname(value: NSString); cdecl;
    { 如果用户加了该公众号为好友，extMsg会上传到服务器
      * @attention 长度不能超过1024字节
    }
    // @property (nonatomic, retain)NSString * extMsg;
    function extMsg: NSString; cdecl;
    procedure setExtMsg(value: NSString); cdecl;
  end;

  TJumpToBizWebviewReq = class(TOCGenericImport<JumpToBizWebviewReqClass,
    JumpToBizWebviewReq>)
  end;

  WXCardItemClass = interface(NSObjectClass)
    ['{284C7C7C-D70C-4188-8AF0-1946936CA8EB}']
  end;

  WXCardItem = interface(NSObject)
    ['{728C3E55-02BA-4D4E-A78D-F92C34439B72}']
    { 卡id
      * @attention 长度不能超过1024字节
    }
    // @property (nonatomic, retain)NSString * cardId;
    function cardId: NSString; cdecl;
    procedure setCardId(value: NSString); cdecl;
    { ext信息
      * @attention 长度不能超过2024字节
    }
    // @property (nonatomic, retain)NSString * extMsg;
    function extMsg: NSString; cdecl;
    procedure setExtMsg(value: NSString); cdecl;
    {
      * @attention 卡的状态,req不需要填。resp:0为未添加，1为已添加。
    }
    // @property (nonatomic, assign)UInt32 cardState;
    function cardState: UInt32; cdecl;
    procedure setCardState(value: UInt32); cdecl;
    {
      * @attention req不需要填，chooseCard返回的。
    }
    // @property (nonatomic, retain)NSString * encryptCode;
    function encryptCode: NSString; cdecl;
    procedure setEncryptCode(value: NSString); cdecl;
    {
      * @attention req不需要填，chooseCard返回的。
    }
    // @property (nonatomic, retain)NSString * appID;
    function appID: NSString; cdecl;
    procedure setAppID(const value: NSString); cdecl;
  end;

  TWXCardItem = class(TOCGenericImport<WXCardItemClass, WXCardItem>)
  end;

  { ! @brief 请求添加卡券至微信卡包
    *
  }
  AddCardToWXCardPackageReqClass = interface(BaseReqClass)
    ['{F97F11CF-1A9E-4DC8-BF55-8931068F5E5B}']
  end;

  AddCardToWXCardPackageReq = interface(BaseReq)
    ['{F506E230-9455-4F8C-B73C-6B63561072D6}']
    { 卡列表
      * @attention 个数不能超过40个 类型WXCardItem
    }
    // @property (nonatomic, retain)NSArray * cardAry;
    function cardAry: NSArray; cdecl;
    procedure setCardAry(value: NSArray); cdecl;
  end;

  TAddCardToWXCardPackageReq = class
    (TOCGenericImport<AddCardToWXCardPackageReqClass,
    AddCardToWXCardPackageReq>)
  end;

  // # pragma mark - AddCardToWXCardPackageResp
  // { ! @brief 微信返回第三方添加卡券结果
  // *
  // }
  AddCardToWXCardPackageRespClass = interface(BaseRespClass)
    ['{A0AABAD7-93A2-438F-8E98-30D6B3F1235F}']
  end;

  AddCardToWXCardPackageResp = interface(BaseResp)
    ['{55903870-99E9-4478-8A88-51A4DF1C4122}']
    { 卡列表
      * @attention 个数不能超过40个 类型WXCardItem
    }
    // @property (nonatomic, retain)NSArray * cardAry;
    function cardAry: NSArray; cdecl;
    procedure setCardAry(value: NSArray); cdecl;
  end;

  TAddCardToWXCardPackageResp = class
    (TOCGenericImport<AddCardToWXCardPackageRespClass,
    AddCardToWXCardPackageResp>)
  end;

  { ! @brief 请求从微信选取卡券
    *
  }
  WXChooseCardReqClass = interface(BaseReqClass)
    ['{D0C7DE91-1048-4C2B-8309-F23281F933DB}']
  end;

  WXChooseCardReq = interface(BaseReq)
    ['{4CAA46FC-BE0C-4EAA-A2D3-17240BAC63AA}']
    // @property (nonatomic, strong)NSString * appID;
    function appID: NSString; cdecl;
    procedure setAppID(value: NSString); cdecl;
    // @property (nonatomic, assign)UInt32 shopID;
    function shopID: NSString; cdecl;
    procedure setShopID(value: NSString); cdecl;
    // @property (nonatomic, assign)UInt32 canMultiSelect;
    function canMultiSelect: UInt32; cdecl;
    procedure setCanMultiSelect(value: UInt32); cdecl;
    // @property (nonatomic, strong)NSString * cardType;
    function cardType: NSString; cdecl;
    procedure setCardType(value: NSString); cdecl;
    // @property (nonatomic, strong)NSString * cardTpID;
    function cardTpID: NSString; cdecl;
    procedure setCardTpID(value: NSString); cdecl;
    // @property (nonatomic, strong)NSString * signType;
    function signType: NSString; cdecl;
    procedure setSignType(value: NSString); cdecl;
    // @property (nonatomic, strong)NSString * cardSign;
    function cardSign: NSString; cdecl;
    procedure setCardSign(value: NSString); cdecl;
    // @property (nonatomic, assign)UInt32 timeStamp;
    function timeStamp: UInt32; cdecl;
    procedure setTimeStamp(value: UInt32); cdecl;
    // @property (nonatomic, strong)NSString * nonceStr;
    function nonceStr: NSString; cdecl;
    procedure setNonceStr(value: NSString); cdecl;
  end;

  TWXChooseCardReq = class(TOCGenericImport<WXChooseCardReqClass,
    WXChooseCardReq>)
  end;

  { ! @brief 微信返回第三方请求选择卡券结果
    *
  }
  WXChooseCardRespClass = interface(BaseRespClass)
    ['{B5ED3338-0470-42B8-8BD4-84AEC7EA8A57}']
  end;

  WXChooseCardResp = interface(BaseResp)
    ['{20C20EBE-A40C-4162-A248-85D6D4C155A6}']
    // @property (nonatomic, retain)NSArray * cardAry;
    function cardAry: NSArray; cdecl;
    procedure setCardAry(value: NSArray); cdecl;
  end;

  TWXChooseCardResp = class(TOCGenericImport<WXChooseCardRespClass,
    WXChooseCardReq>)
  end;

  { ! @brief 多媒体消息结构体
    *
    * 用于微信终端和第三方程序之间传递消息的多媒体消息内容
  }
  WXMediaMessageClass = interface(NSObjectClass)
    ['{2D96E25A-45C1-4973-865B-8753E83B9661}']
    // + (WXMediaMessage * )message;
    function &message: WXMediaMessage; cdecl;
  end;

  WXMediaMessage = interface(NSObject)
    ['{9485B0F6-2303-4752-80DA-CA96A54F130B}']
    { 标题
      * @note 长度不能超过512字节
    }
    // @property (nonatomic, retain)NSString * title;
    function title: NSString; cdecl;
    procedure setTitle(value: NSString); cdecl;
    { 描述内容
      * @note 长度不能超过1K
    }
    // @property (nonatomic, retain)NSString * description;
    function description: NSString; cdecl;
    procedure setDescription(value: NSString); cdecl;
    { 缩略图数据
      * @note 大小不能超过32K
    }
    // @property (nonatomic, retain)NSData * thumbData;
    function thumbData: NSData; cdecl;
    procedure setThumbData(value: NSData); cdecl;
    {
      * @note 长度不能超过64字节
    }
    // @property (nonatomic, retain)NSString * mediaTagName;
    function mediaTagName: NSString; cdecl;
    procedure setMediaTagName(value: NSString); cdecl;
    {
      *
    }
    // @property (nonatomic, retain)NSString * messageExt;
    function messageExt: NSString; cdecl;
    procedure setMessageExt(value: NSString); cdecl;
    // @property (nonatomic, retain)NSString * messageAction;
    function messageAction: NSString; cdecl;
    procedure setMessageAction(value: NSString); cdecl;
    {
      * 多媒体数据对象，可以为WXImageObject，WXMusicObject，WXVideoObject，WXWebpageObject等。
    }
    // @property (nonatomic, retain)id mediaObject;
    function mediaObject: Pointer; cdecl;
    procedure setMediaObject(value: Pointer); cdecl;

    { ! @brief 设置消息缩略图的方法
      *
      * @param image 缩略图
      * @note 大小不能超过32K
    }
    procedure setThumbImage(imgage: UIImage);
  end;

  TWXMediaMessage = class(TOCGenericImport<WXMediaMessageClass, WXMediaMessage>)
  end;

  // WXImageObject

  { ! @brief 多媒体消息中包含的图片数据对象
    *
    * 微信终端和第三方程序之间传递消息中包含的图片数据对象。
    * @note imageData成员不能为空
    * @see WXMediaMessage
  }
  WXImageObject = interface;

  WXImageObjectClass = interface(NSObjectClass)
    ['{919ED9CD-DE12-4763-B1E1-91E6B3A4043F}']
    function &object: WXImageObject; cdecl;
  end;

  WXImageObject = interface(NSObject)
    ['{2CBBE3D6-0DB8-4DE5-A597-D84E24CD5038}']
    { ! @brief 返回一个WXImageObject对象
      *
      * @note 返回的WXImageObject对象是自动释放的
    }

    { 图片真实数据内容
      * @note 大小不能超过10M
    }
    // @property (nonatomic, retain)NSData * imageData;
    function imageData: NSData; cdecl;
    procedure setImageData(value: NSData); cdecl;
  end;

  TWXImageObject = class(TOCGenericImport<WXImageObjectClass, WXImageObject>)
  end;

  { ! @brief 多媒体消息中包含的音乐数据对象
    *
    * 微信终端和第三方程序之间传递消息中包含的音乐数据对象。
    * @note musicUrl和musicLowBandUrl成员不能同时为空。
    * @see WXMediaMessage
  }
  WXMusicObject = interface;

  WXMusicObjectClass = interface(NSObjectClass)
    ['{51669251-E5BC-4A9B-B22F-1722F822C6C4}']
    { ! @brief 返回一个WXMusicObject对象
      *
      * @note 返回的WXMusicObject对象是自动释放的
    }
    // + (WXMusicObject * ) object;
    function &object: WXMusicObject; cdecl;
  end;

  WXMusicObject = interface(NSObject)
    ['{A0753917-1C5E-4CC2-8FC5-8C5A63576E8D}']
    { 音乐网页的url地址
      * @note 长度不能超过10K
    }
    // @property (nonatomic, retain)NSString * musicUrl;
    function musicUrl: NSString; cdecl;
    procedure setMusicUrl(value: NSString); cdecl;
    { 音乐lowband网页的url地址
      * @note 长度不能超过10K
    }
    // @property (nonatomic, retain)NSString * musicLowBandUrl;
    function musicLowBandUrl: NSString; cdecl;
    procedure setMusicLowBandUrl(value: NSString); cdecl;
    { 音乐数据url地址
      * @note 长度不能超过10K
    }
    // @property (nonatomic, retain)NSString * musicDataUrl;
    function musicDataUrl: NSString; cdecl;
    procedure setMusicDataUrl(value: NSString); cdecl;
    { 音乐lowband数据url地址
      * @note 长度不能超过10K
    }
    // @property (nonatomic, retain)NSString * musicLowBandDataUrl;
    function musicLowBandDataUrl: NSString; cdecl;
    procedure setMusicLowBandDataUrl(value: NSString); cdecl;
  end;

  TWXMusicObject = class(TOCGenericImport<WXMusicObjectClass, WXMusicObject>)
  end;

  { ! @brief 多媒体消息中包含的视频数据对象
    *
    * 微信终端和第三方程序之间传递消息中包含的视频数据对象。
    * @note videoUrl和videoLowBandUrl不能同时为空。
    * @see WXMediaMessage
  }
  WXVideoObject = interface;

  WXVideoObjectClass = interface(NSObjectClass)
    ['{0D4B3FBF-CDCC-4790-B6EB-77252E687082}']
    { ! @brief 返回一个WXVideoObject对象
      *
      * @note 返回的WXVideoObject对象是自动释放的
    }
    // + (WXVideoObject * ) object;
    function &object: WXVideoObject;
  end;

  WXVideoObject = interface(NSObject)
    ['{4E553F35-7E2F-4281-8C02-82C6F3D2E12F}']
    { 视频网页的url地址
      * @note 长度不能超过10K
    }
    // @property (nonatomic, retain)NSString * videoUrl;
    function videoUrl: NSString; cdecl;
    procedure setVideoUrl(value: NSString); cdecl;
    { 视频lowband网页的url地址
      * @note 长度不能超过10K
    }
    // @property (nonatomic, retain)NSString * videoLowBandUrl;
    function videoLowBandUrl: NSString; cdecl;
    procedure setVideoLowBandUrl(value: NSString); cdecl;
  end;

  TWXVideoObject = class(TOCGenericImport<WXVideoObjectClass, WXVideoObject>)
  end;

  { ! @brief 多媒体消息中包含的网页数据对象
    *
    * 微信终端和第三方程序之间传递消息中包含的网页数据对象。
    * @see WXMediaMessage
  }
  WXWebpageObject = interface;

  WXWebpageObjectClass = interface(NSObjectClass)
    ['{1805D0E5-5207-4DC2-AD30-D3E549EAEF10}']
    { ! @brief 返回一个WXWebpageObject对象
      *
      * @note 返回的WXWebpageObject对象是自动释放的
    }
    // + (WXWebpageObject * ) object;
    function &object: WXWebpageObject; cdecl;
  end;

  WXWebpageObject = interface(NSObject)
    ['{23315693-6BC9-4B97-A64C-8B1A7D324576}']
    { 网页的url地址
      * @note 不能为空且长度不能超过10K
    }
    // @property (nonatomic, retain)NSString * webpageUrl;
    function webpageUrl: NSString; cdecl;
    procedure setWebpageUrl(value: NSString); cdecl;
  end;

  TWXWebpageObject = class(TOCGenericImport<WXWebpageObjectClass,
    WXWebpageObject>)
  end;

  { ! @brief 多媒体消息中包含的App扩展数据对象
    *
    * 第三方程序向微信终端发送包含WXAppExtendObject的多媒体消息，
    * 微信需要处理该消息时，会调用该第三方程序来处理多媒体消息内容。
    * @note url，extInfo和fileData不能同时为空
    * @see WXMediaMessage
  }
  WXAppExtendObject = interface;

  WXAppExtendObjectClass = interface(NSObjectClass)
    ['{BFAF75E4-2EA3-405B-8399-76148E9337F0}']
    { ! @brief 返回一个WXAppExtendObject对象
      *
      * @note 返回的WXAppExtendObject对象是自动释放的
    }
    // + (WXAppExtendObject * ) object;
    function &object: WXAppExtendObject; cdecl;
  end;

  WXAppExtendObject = interface(NSObject)
    ['{FF5E043D-45D7-4D4F-B366-8271DD0799F8}']

    { 若第三方程序不存在，微信终端会打开该url所指的App下载地址
      * @note 长度不能超过10K
    }
    // @property (nonatomic, retain)NSString * url;
    function url: NSString; cdecl;
    procedure setUrl(value: NSString); cdecl;
    { 第三方程序自定义简单数据，微信终端会回传给第三方程序处理
      * @note 长度不能超过2K
    }
    // @property (nonatomic, retain)NSString * extInfo;
    function extInfo: NSString; cdecl;
    procedure setExtInfo(value: NSString); cdecl;
    { App文件数据，该数据发送给微信好友，微信好友需要点击后下载数据，微信终端会回传给第三方程序处理
      * @note 大小不能超过10M
    }
    // @property (nonatomic, retain)NSData * fileData;
    function fileData: NSData; cdecl;
    procedure setFileData(value: NSData); cdecl;
  end;

  TWXAppExtendObject = class(TOCGenericImport<WXAppExtendObjectClass,
    WXAppExtendObject>)
  end;

  { ! @brief 多媒体消息中包含的表情数据对象
    *
    * 微信终端和第三方程序之间传递消息中包含的表情数据对象。
    * @see WXMediaMessage
  }
  WXEmoticonObject = interface;

  WXEmoticonObjectClass = interface(NSObjectClass)
    ['{AA2AA771-21F0-4D41-B695-3C2A2ED5629A}']
    { ! @brief 返回一个WXEmoticonObject对象
      *
      * @note 返回的WXEmoticonObject对象是自动释放的
    }
    // + (WXEmoticonObject * ) object;
    function &object: WXEmoticonObject; cdecl;
  end;

  WXEmoticonObject = interface(NSObject)
    ['{1C0287A5-24B9-4DC9-81CB-BB6D58379EA3}']
    { 表情真实数据内容
      * @note 大小不能超过10M
    }
    // @property (nonatomic, retain)NSData * emoticonData;
    function emoticonData: NSData; cdecl;
    procedure setEmoticonData(value: NSData); cdecl;
  end;

  TWXEmoticonObject = class(TOCGenericImport<WXEmoticonObjectClass,
    WXEmoticonObject>)
  end;

  { ! @brief 多媒体消息中包含的文件数据对象
    *
    * @see WXMediaMessage
  }
  WXFileObject = interface;

  WXFileObjectClass = interface(NSObjectClass)
    ['{82B143D3-7383-46ED-85A9-BE659EF05E4C}']

    { ! @brief 返回一个WXFileObject对象
      *
      * @note 返回的WXFileObject对象是自动释放的
    }
    // + (WXFileObject * ) object;

    function &object: WXFileObject; cdecl;
  end;

  WXFileObject = interface(NSObject)
    ['{07F1C197-45A1-4ACC-95AD-A67D877F7EBC}']

    { 文件后缀名
      * @note 长度不超过64字节
    }
    // @property (nonatomic, retain)NSString * fileExtension;
    function fileExtension: NSString; cdecl;
    procedure setFileExtension(value: NSString); cdecl;
    { 文件真实数据内容
      * @note 大小不能超过10M
    }
    // @property (nonatomic, retain)NSData * fileData;
    function fileData: NSData; cdecl;
    procedure setFileData(value: NSData); cdecl;
  end;

  TWXFileObject = class(TOCGenericImport<WXFileObjectClass, WXFileObject>)
  end;

  { ! @brief 多媒体消息中包含的地理位置数据对象
    *
    * 微信终端和第三方程序之间传递消息中包含的地理位置数据对象。
    * @see WXMediaMessage
  }
  WXLocationObject = interface;

  WXLocationObjectClass = interface(NSObjectClass)
    ['{20F8808C-2407-4AB2-AC07-52E8D076CC71}']
    { ! @brief 返回一个WXLocationObject对象
      *
      * @note 返回的WXLocationObject对象是自动释放的
    }
    // + (WXLocationObject * ) object;
    function &object: WXLocationObject; cdecl;
  end;

  WXLocationObject = interface(NSObject)
    { 地理位置信息
      * @note 经纬度
    }
    // @property (nonatomic, assign)double lng; // 经度
    function lng: Double; cdecl;
    procedure setLng(value: Double); cdecl;
    // @property (nonatomic, assign)double lat; // 纬度
    function lat: Double; cdecl;
    procedure setLat(value: Double); cdecl;
  end;

  TWXLocationObject = class(TOCGenericImport<WXLocationObjectClass,
    WXLocationObject>)
  end;

  { ! @brief 多媒体消息中包含的文本数据对象
    *
    * 微信终端和第三方程序之间传递消息中包含的文本数据对象。
    * @see WXMediaMessage
  }
  WXTextObject = interface;

  WXTextObjectClass = interface(NSObjectClass)
    ['{19DC52A4-BBAE-4699-BA17-A7FC2A9A24C7}']
    { ! @brief 返回一个WXTextObject对象
      *
      * @note 返回的WXTextObject对象是自动释放的
    }
    // + (WXTextObject * ) object;
    function &object: WXTextObject; cdecl;
  end;

  WXTextObject = interface(NSObject)
    ['{A0356E8E-5371-49F3-B69B-3E10A0DD3592}']

    { 地理位置信息
      * @note 文本内容
    }
    // @property (nonatomic, retain)NSString * contentText;
    function contentText: NSString; cdecl;
    procedure setContentText(value: NSString); cdecl;
  end;

  TWXTextObject = class(TOCGenericImport<WXTextObjectClass, WXTextObject>)
  end;

  // WXApi.h

  { ! @brief 接收并处理来自微信终端程序的事件消息
    *
    * 接收并处理来自微信终端程序的事件消息，期间微信界面会切换到第三方应用程序。
    * WXApiDelegate 会在handleOpenURL:delegate:中使用并触发。
    * }
  WXApiDelegate = interface(IObjectiveC)
    ['{C6F5BE04-8126-4F08-A7DA-50E33EC4ABF4}']
    { ! @brief 收到一个来自微信的请求，第三方应用程序处理完后调用sendResp向微信发送结果
      *
      * 收到一个来自微信的请求，异步处理完成后必须调用sendResp发送处理结果给微信。
      * 可能收到的请求有GetMessageFromWXReq、ShowMessageFromWXReq等。
      * @param req 具体请求内容，是自动释放的
      * }
    // -(void) onReq:(BaseReq*)req;
    procedure onReq(req: BaseReq); cdecl;
    { ! @brief 发送一个sendReq后，收到微信的回应
      *
      * 收到一个来自微信的处理结果。调用一次sendReq后会收到onResp。
      * 可能收到的处理结果有SendMessageToWXResp、SendAuthResp等。
      * @param resp具体的回应内容，是自动释放的
    }
    // - (void)onResp: (BaseResp * )resp;
    procedure onResp(resp: BaseResp); cdecl;
  end;

  { ! @brief 微信Api接口函数类
    *
    * 该类封装了微信终端SDK的所有接口
  }
  WXApiClass = interface(NSObjectClass)
    ['{764D1D63-6B95-4B64-B60D-08D80D476939}']

    { ! @brief WXApi的成员函数，向微信终端程序注册第三方应用。
      *
      * 需要在每次启动第三方应用程序时调用。第一次调用后，会在微信的可用应用列表中出现。
      * iOS7及以上系统需要调起一次微信才会出现在微信的可用应用列表中。
      * @attention 请保证在主线程中调用此函数
      * @param appid 微信开发者ID
      * @param typeFlag 应用支持打开的文件类型
      * @return 成功返回YES，失败返回NO。
    }
    // + (BOOL)registerApp: (NSString * )appID;
    function registerApp(appID: NSString): Boolean; cdecl; // where typeflag?

    { ! @brief WXApi的成员函数，向微信终端程序注册第三方应用。
      *
      * 需要在每次启动第三方应用程序时调用。第一次调用后，会在微信的可用应用列表中出现。
      * @see registerApp
      * @param appid 微信开发者ID
      * @param appdesc 应用附加信息，长度不超过1024字节
      * @return 成功返回YES，失败返回NO。
    }
    // +(BOOL)registerApp: (NSString * )appID withDescription: (NSString *)appdesc;
    [MethodName('registerApp:withDescription:')]
    function registerAppWithDescription(appID: NSString; appdesc: NSString)
      : Boolean; cdecl;
    { ! @brief WXApi的成员函数，向微信终端程序注册应用支持打开的文件类型。
      *
      * 需要在每次启动第三方应用程序时调用。调用后并第一次成功分享数据到微信后，会在微信的可用应用列表中出现。
      * @see registerApp
      * @param typeFlag 应用支持打开的数据类型, enAppSupportContentFlag枚举类型 “|” 操作后结果
    }
    // +(void)registerAppSupportContentFlag: (UInt64)typeFlag;
    procedure registerAppSupportContentFlag(typeFlag: UInt64); cdecl;
    { ! @brief 处理微信通过URL启动App时传递的数据
      *
      * 需要在 application:openURL:sourceApplication:annotation:或者application:handleOpenURL中调用。
      * @param url 微信启动第三方应用时传递过来的URL
      * @param delegate  WXApiDelegate对象，用来接收微信触发的消息。
      * @return 成功返回YES，失败返回NO。
    }
    // +(BOOL)handleOpenURL: (NSURL * )url delegate: (id<WXApiDelegate>)delegate;
    function handleOpenURL(url: NSURL; delegate: Pointer): Boolean; cdecl;
    { ! @brief 检查微信是否已被用户安装
      *
      * @return 微信已安装返回YES，未安装返回NO。
    }
    // +(BOOL)isWXAppInstalled;
    function isWXAppInstalled: Boolean; cdecl;
    { ! @brief 判断当前微信的版本是否支持OpenApi
      *
      * @return 支持返回YES，不支持返回NO。
    }
    // +(BOOL)isWXAppSupportApi;
    function isWXAppSupportApi: Boolean; cdecl;
    { ! @brief 获取微信的itunes安装地址
      *
      * @return 微信的安装地址字符串。
    }
    // +(NSString * )getWXAppInstallUrl;
    function getWXAppInstallUrl: NSString; cdecl;
    { ! @brief 获取当前微信SDK的版本号
      *
      * @return 返回当前微信SDK的版本号
    }
    // +(NSString * )getApiVersion;
    function getApiVersion: NSString; cdecl;
    { ! @brief 打开微信
      *
      * @return 成功返回YES，失败返回NO。
    }
    // +(BOOL)openWXApp;
    function openWXApp: Boolean; cdecl;
    { ! @brief 发送请求到微信，等待微信返回onResp
      *
      * 函数调用后，会切换到微信的界面。第三方应用程序等待微信返回onResp。微信在异步处理完成后一定会调用onResp。支持以下类型
      * SendAuthReq、SendMessageToWXReq、PayReq等。
      * @param req 具体的发送请求，在调用函数后，请自己释放。
      * @return 成功返回YES，失败返回NO。
    }
    // +(BOOL)sendReq: (BaseReq * )req;
    function sendReq(req: BaseReq): Boolean; cdecl;
    { ! @brief 发送Auth请求到微信，支持用户没安装微信，等待微信返回onResp
      *
      * 函数调用后，会切换到微信的界面。第三方应用程序等待微信返回onResp。微信在异步处理完成后一定会调用onResp。支持SendAuthReq类型。
      * @param req 具体的发送请求，在调用函数后，请自己释放。
      * @param viewController 当前界面对象。
      * @param delegate  WXApiDelegate对象，用来接收微信触发的消息。
      * @return 成功返回YES，失败返回NO。
    }
    // +(BOOL)SendAuthReq: (SendAuthReq * )req viewController: (UIViewController *
    // )viewController delegate: (id<WXApiDelegate>)delegate;
    function SendAuthReq(req: SendAuthReq; viewController: UIViewController;
      delegate: Pointer): Boolean; cdecl;
    { ! @brief 收到微信onReq的请求，发送对应的应答给微信，并切换到微信界面
      *
      * 函数调用后，会切换到微信的界面。第三方应用程序收到微信onReq的请求，异步处理该请求，完成后必须调用该函数。可能发送的相应有
      * GetMessageFromWXResp、ShowMessageFromWXResp等。
      * @param resp 具体的应答内容，调用函数后，请自己释放
      * @return 成功返回YES，失败返回NO。
    }
    // +(BOOL)sendResp: (BaseResp * )resp;
    function sendResp(resp: BaseResp): Boolean; cdecl;
  end;

  WXApi = interface(NSObject)
    ['{D5F7981D-ECB3-4ADD-A87F-6AC503E91E11}']
  end;

  TWXApi = class(TOCGenericImport<WXApiClass, WXApi>)
  end;

  // WechatAuthSDK.h
  AuthErrCode = (WechatAuth_Err_Ok = 0, // Auth成功
    WechatAuth_Err_NormalErr = -1, // 普通错误
    WechatAuth_Err_NetworkErr = -2, // 网络错误
    WechatAuth_Err_GetQrcodeFailed = -3, // 获取二维码失败
    WechatAuth_Err_Cancel = -4, // 用户取消授权
    WechatAuth_Err_Timeout = -5 // 超时
    );

  WechatAuthAPIDelegate = interface(IObjectiveC)
    ['{E3337B78-A78F-4E13-82F7-F12037CD26B3}']
    procedure onAuthGotQrcode(image: UIImage); cdecl; // 得到二维码
    procedure onQrcodeScanned; cdecl; // 二维码被扫描
    [MethodName('onAuthFinish:AuthCode:')]
    procedure onAuthFinish(errCode: Integer; AuthCode: NSString); cdecl; // 成功登录
  end;

  WechatAuthSDKClass = interface(NSObjectClass)
    ['{0DBAA7D0-34E1-4B0B-BFB8-60BFE79DF721}']
  end;

  WechatAuthSDK = interface(NSObject)
    ['{86B2B1F9-B686-44BB-9484-6633ED9ABF0C}']
    // NSString *_sdkVersion;
    // __weak id<WechatAuthAPIDelegate> _delegate;
    // @property (nonatomic, weak)id<WechatAuthAPIDelegate> delegate;
    function delegate: Pointer; cdecl;
    procedure setDelegate(value: Pointer); cdecl;
    // @property (nonatomic, readonly)NSString * sdkVersion; // authSDK版本号
    function sdkVersion: NSString; cdecl;

    { !@brief 发送登录请求 ， 等待WechatAuthAPIDelegate回调 *
      * @param appID 微信开发者ID
      * @param nonceStr 一个随机的尽量不重复的字符串 ， 用来使得每次的signature不同
      * @param timeStamp 时间戳
      * @param scope 应用授权作用域 ， 拥有多个作用域用逗号 （, ） 分隔 * @param signature 签名
      * @param schemeData 会在扫码后拼在scheme后
      * @return 成功返回YES ， 失败返回NO
      注: 该实现只保证同时只有一个Auth在运行 ， Auth未完成或未Stop再次调用Auth接口时会返回NO 。 }
    // -(BOOL)Auth: (NSString * )appID nonceStr: (NSString * )nonceStr timeStamp
    // : (NSString * )timeStamp scope: (NSString * )scope signature: (NSString *
    // )signature schemeData: (NSString * )schemeData;
    [MethodName('Auth:nonceStr:timeStamp:scope:signature:schemeData:')]
    function Auth(appID: NSString; nonceStr: NSString; timeStamp: NSString;
      scope: NSString; signature: NSString; schemeData: NSString)
      : Boolean; cdecl;
    { !@brief 暂停登录请求 * * @return 成功返回YES ， 失败返回NO 。 }
    // -(BOOL)StopAuth;
    function StopAuth: Boolean; cdecl;
  end;

  TWechatAuthSDK = class(TOCGenericImport<WechatAuthSDKClass, WechatAuthSDK>)
  end;

implementation

end.
